{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2022-02-03T03:25:31.510Z",
    "end": "2022-02-03T03:26:21.592Z",
    "duration": 50082,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9e740c8e-c214-4a95-b8a2-987d877ba955",
      "title": "",
      "fullFile": "cypress/integration/first-test.spec.js",
      "file": "cypress/integration/first-test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "tooltip",
          "fullTitle": "tooltip",
          "timedOut": null,
          "duration": 5585,
          "state": "passed",
          "speed": "medium",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit(\"/\");\ncy.contains(\"Modal & Overlays\").click();\ncy.contains(\"Tooltip\").click();\ncy.contains(\"nb-card\", \"Colored Tooltips\").contains(\"Default\").click();\ncy.get(\"nb-tooltip\").should(\"contain\", \"This is a tooltip\");",
          "err": {},
          "uuid": "628719b8-87ae-4997-afdd-f146b8d6d81a",
          "parentUUID": "9e740c8e-c214-4a95-b8a2-987d877ba955",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "Alert",
          "fullTitle": "Alert",
          "timedOut": null,
          "duration": 4192,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "cy.visit(\"/\");\ncy.contains(\"Tables & Data\").click();\ncy.contains(\"Smart Table\").click(); // 3 - cancel\ncy.get(\"tbody tr\").first().find(\".nb-trash\").click();\ncy.on(\"window:confirm\", () => false); // //1- accept\n// cy.get(\"tbody tr\").eq(1).find(\".nb-trash\").click();\n// cy.on(\"window:confirm\", (confirm) => {\n//   expect(confirm).to.equal(\"Are you sure you want to delete?\");\n// });\n// // 2 - accept\n// const stub = cy.stub();\n// cy.on(\"window:confirm\", (confirm) => {\n//   cy.get(\"tbody tr\")\n//     .first()\n//     .find(\".nb-trash\")\n//     .click()\n//     .then(() => {\n//       expect(stub.getCall(0)).to.be.calledWith(\n//         \"Are you sure you want to delete?\"\n//       );\n//     });\n// });",
          "err": {},
          "uuid": "38af4c26-9d73-4480-bf49-7f53d73d65e8",
          "parentUUID": "9e740c8e-c214-4a95-b8a2-987d877ba955",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
          "title": "Selector tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Selector selection",
              "fullTitle": "Selector tests Selector selection",
              "timedOut": null,
              "duration": 4178,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Forms\").click();\ncy.contains(\"Form Layouts\").click(); // Search by tag\ncy.get(\"input\"); // by id\ncy.get(\"#inputEmail1\"); // by class name\ncy.get(\".input-full-width\"); // by Attribute name\ncy.get(\"[placeholder]\"); // by Attribute name and value\ncy.get('[placeholder=\"Email\"]'); // by class value\ncy.get('[class=\"input-full-width size-medium shape-rectangle\"]'); //by tag name and Attribute with value\ncy.get('input[placeholder=\"Email\"]'); // by two different attribute\ncy.get('[placeholder=\"Email\"]#inputEmail1.input-full-width'); // by tag name, attribute with value id and class name\ncy.get('input[placeholder=\"Email\"]#inputEmail1.input-full-width'); // The most recommended way by cypress\n//cy.get('[data-cy=\"inputEmail\"]')",
              "err": {},
              "uuid": "c52068b6-93b6-4015-8826-52acb992a113",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "second test",
              "fullTitle": "Selector tests second test",
              "timedOut": null,
              "duration": 3256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Forms\").click();\ncy.contains(\"Form Layouts\").click(); //cy.get('[data-cy=\"signInButton\"]')\ncy.contains('[status=\"warning\"]', \"Sign in\"); //Travel to the dom -- Parents and child\ncy.get(\"#inputEmail3\").parents(\"form\").find(\"button\").should(\"contain\", \"Sign in\").parents(\"form\").find(\"nb-checkbox\").click();\ncy.contains(\"nb-card\", \"Horizontal form\").find('[type=\"email\"]');",
              "err": {},
              "uuid": "79ff1dcf-16a3-460a-a0fa-8a78dfd8dd6c",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "then and wrap methods",
              "fullTitle": "Selector tests then and wrap methods",
              "timedOut": null,
              "duration": 2932,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Forms\").click();\ncy.contains(\"Form Layouts\").click(); // find label\n// cy.contains(\"nb-card\", \"Using the Grid\")\n//   .find('[for=\"inputEmail1\"]')\n//   .should(\"contain\", \"Email\");\n// cy.contains(\"nb-card\", \"Using the Grid\")\n//   .find('[for=\"inputPassword2\"]')\n//   .should(\"contain\", \"Password\");\n// cy.contains(\"nb-card\", \"Basic form\")\n//   .find('[for=\"exampleInputEmail1\"]')\n//   .should(\"contain\", \"Email address\");\n// cy.contains(\"nb-card\", \"Basic form\")\n//   .find('[for=\"exampleInputPassword1\"]')\n//   .should(\"contain\", \"Password\");\n// Selenium\n// const firstForm = cy.contains(\"nb-card\", \"Using the Grid\");\n// const secondForm = cy.contains(\"nb-card\", \"Basic form\");\n// firstForm.find('[for=\"inputEmail1\"]').should(\"contain\", \"Email\");\n// firstForm.find('[for=\"inputPassword2\"]').should(\"contain\", \"Password\");\n// secondForm\n//   .find('[for=\"exampleInputPassword1\"]')\n//   .should(\"contain\", \"Password\");\n// cypress style\ncy.contains(\"nb-card\", \"Using the Grid\").then(firstForm => {\n  const emailLabelFirst = firstForm.find('[for=\"inputEmail1\"]').text();\n  const passwordLabelFirst = firstForm.find('[for=\"inputPassword2\"]').text();\n  expect(emailLabelFirst).to.equal(\"Email\");\n  expect(passwordLabelFirst).to.equal(\"Password\");\n  cy.contains(\"nb-card\", \"Basic form\").then(secondForm => {\n    const emailLabelSecond = secondForm.find('[for=\"exampleInputEmail1\"]').text();\n    const passwordLabelSecond = secondForm.find('[for=\"exampleInputPassword1\"]').text();\n    expect(passwordLabelFirst).to.equal(passwordLabelSecond);\n    cy.wrap(secondForm).find('[for=\"exampleInputEmail1\"]').should(\"contain\", \"Email address\");\n  });\n});",
              "err": {},
              "uuid": "a95f2f2e-7a48-489d-a5fd-92b70366a9db",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invoke command",
              "fullTitle": "Selector tests Invoke command",
              "timedOut": null,
              "duration": 3497,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Form\").click();\ncy.contains(\"Form Layouts\").click(); //1\ncy.get(\"[for=exampleInputEmail1\").should(\"contain\", \"Email address\").should(\"have.class\", \"label\").and(\"have.text\", \"Email address\"); // 2\ncy.get('[for=\"exampleInputEmail1\"]').then(lable => {\n  expect(lable.text()).to.equal(\"Email address\");\n  expect(lable).to.have.class(\"label\");\n  expect(lable).to.have.text(\"Email address\"); // 3\n  cy.get('[for=\"exampleInputEmail1\"]').invoke(\"text\").then(text => {\n    expect(text).to.equal(\"Email address\");\n  });\n  cy.contains(\"nb-card\", \"Basic form\").find(\"nb-checkbox\").click().find(\".custom-checkbox\").invoke(\"attr\", \"class\") //.should(\"contain\", \"checked\");\n  .then(classValue => {\n    expect(classValue).to.contain(\"checked\");\n  });\n});",
              "err": {},
              "uuid": "8eb08965-23bc-4b83-b8e8-3adba313f011",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "assert property",
              "fullTitle": "Selector tests assert property",
              "timedOut": null,
              "duration": 3602,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Form\").click();\ncy.contains(\"Datepicker\").click();\nlet date = new Date();\ndate.setDate(date.getDate() + 5);\nlet futureDay = date.getDate();\nlet futureMonth = date.toLocaleDateString(\"default\", {\n  month: \"short\"\n});\ncy.contains(\"nb-card\", \"Common Datepicker\").find(\"input\").then(input => {\n  cy.wrap(input).click();\n  cy.get(\"nb-calendar-navigation\").invoke(\"attr\", \"ng-reflect-date\").then(dateAttribute => {\n    if (!dateAttribute.includes(futureMonth)) {\n      cy.get('[data-name=\"chevron-righ\"]').click();\n      cy.get('nb-calendar-day-picker [class=\"day-cell ng-star-inserted\"]').contains(futureDay).click();\n    } else {\n      cy.get('nb-calendar-day-picker [class=\"day-cell ng-star-inserted\"]').contains(futureDay).click();\n    }\n  }); // cy.get(\"nb-calendar-day-picker\").contains(\"17\").click();\n  // cy.wrap(input)\n  //   .invoke(\"prop\", \"value\")\n  //   .should(\"contain\", \"May 17, 2021\");\n});",
              "err": {},
              "uuid": "f8db83d8-5d56-4c50-9a26-35e0085d1d7b",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "radio button",
              "fullTitle": "Selector tests radio button",
              "timedOut": null,
              "duration": 3274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Forms\").click();\ncy.contains(\"Form Layout\").click();\ncy.contains(\"nb-card\", \"Using the Grid\").find('[type=\"radio\"]').then(radioButtons => {\n  cy.wrap(radioButtons).first().check({\n    force: true\n  }).should(\"be.checked\");\n  cy.wrap(radioButtons).eq(1).check({\n    force: true\n  });\n  cy.wrap(radioButtons).eq(0).should(\"not.be.checked\");\n  cy.wrap(radioButtons).eq(2).should(\"be.disabled\");\n});",
              "err": {},
              "uuid": "27cc69c5-2712-4a53-afa7-2d2cf8d8ccba",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check boxes",
              "fullTitle": "Selector tests check boxes",
              "timedOut": null,
              "duration": 3198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Modal & Overlays\").click();\ncy.contains(\"Toastr\").click();\ncy.get('[type=\"checkbox\"]').check({\n  force: true\n});\ncy.get('[type=\"checkbox\"]').eq(0).click({\n  force: true\n});\ncy.get('[type=\"checkbox').eq(1).check({\n  force: true\n});",
              "err": {},
              "uuid": "695048f7-80bc-4f3d-837c-154226f4970f",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "list and dropdown",
              "fullTitle": "Selector tests list and dropdown",
              "timedOut": null,
              "duration": 3307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\"); //1\n// cy.get(\"nav nb-select\").click();\n// cy.get(\".options-list\").contains(\"Dark\").click();\n// cy.get('nav nb-select').should('contain', 'Dark')\n// cy.get(\"nb-layout-header nav\").should(\n//   \"have.css\",\n//   \"background-color\",\n//   \"rgb(34, 43, 69)\"\n//2\ncy.get(\"nav nb-select\").then(dropdown => {\n  cy.wrap(dropdown).click();\n  cy.get(\".options-list nb-option\").each((listItem, index) => {\n    const itemText = listItem.text().trim();\n    const colors = {\n      Light: \"rgb(255, 255, 255)\",\n      Dark: \"rgb(34, 43, 69)\",\n      Cosmic: \"rgb(50, 50, 89)\",\n      Corporate: \"rgb(255, 255, 255)\"\n    };\n    cy.wrap(listItem).click();\n    cy.wrap(dropdown).should(\"contain\", itemText);\n    cy.get(\"nb-layout-header nav\").should(\"have.css\", \"background-color\", colors[itemText]); //cy.wrap(dropdown).click();\n    if (index < 3) {\n      cy.wrap(dropdown).click();\n    }\n  });\n});",
              "err": {},
              "uuid": "9bb0ce2b-72bd-4704-856c-179668b8d909",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Web tables",
              "fullTitle": "Selector tests Web tables",
              "timedOut": null,
              "duration": 12023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/\");\ncy.contains(\"Tables & Data\").click();\ncy.contains(\"Smart Table\").click(); // 1\ncy.get(\"tbody\").contains(\"tr\", \"Larry\").then(tableRow => {\n  cy.wrap(tableRow).find(\".nb-edit\").click();\n  cy.wrap(tableRow).find('[placeholder=\"Age\"]').clear().type(\"25\");\n  cy.wrap(tableRow).find(\".nb-checkmark\").click();\n  cy.wrap(tableRow).find(\"td\").eq(6).should(\"contain\", \"25\");\n}); // 2\ncy.get(\"thead\").find(\".nb-plus\").click();\ncy.get(\"thead\").find(\"tr\").eq(2).then(tableRow => {\n  cy.wrap(tableRow).find('[placeholder=\"First Name\"]').type(\"Mohammad\");\n  cy.wrap(tableRow).find('[placeholder=\"Last Name\"]').type(\"Rahman\");\n  cy.wrap(tableRow).find(\".nb-checkmark\").click();\n});\ncy.get(\"tbody tr\").first().find(\"td\").then(tableColums => {\n  cy.wrap(tableColums).eq(2).should(\"contain\", \"Mohammad\");\n  cy.wrap(tableColums).eq(3).should(\"contain\", \"Rahman\");\n}); // 3\n// cy.get('input[placeholder=\"Age\"]').type(\"20\");\nconst age = [20, 30, 40, 200];\ncy.wrap(age).each(age => {\n  cy.get('thead [placeholder=\"Age\"]').clear().type(age);\n  cy.wait(500);\n  cy.get(\"tbody tr\").each(tableRow => {\n    if (age == 200) {\n      cy.wrap(tableRow).should(\"contain\", \"No data found\");\n    } else {\n      cy.wrap(tableRow).find(\"td\").eq(6).should(\"contain\", age);\n    }\n  });\n});",
              "err": {},
              "uuid": "00e26fc3-fcf3-4cb8-addf-4717fd431314",
              "parentUUID": "ac99489e-097e-45e9-9ac5-80a12c6ffe23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c52068b6-93b6-4015-8826-52acb992a113",
            "79ff1dcf-16a3-460a-a0fa-8a78dfd8dd6c",
            "a95f2f2e-7a48-489d-a5fd-92b70366a9db",
            "8eb08965-23bc-4b83-b8e8-3adba313f011",
            "f8db83d8-5d56-4c50-9a26-35e0085d1d7b",
            "27cc69c5-2712-4a53-afa7-2d2cf8d8ccba",
            "695048f7-80bc-4f3d-837c-154226f4970f",
            "9bb0ce2b-72bd-4704-856c-179668b8d909",
            "00e26fc3-fcf3-4cb8-addf-4717fd431314"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39267,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "628719b8-87ae-4997-afdd-f146b8d6d81a",
        "38af4c26-9d73-4480-bf49-7f53d73d65e8"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 9777,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}